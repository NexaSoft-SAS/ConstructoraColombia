<div
	id="smoke-bkg"
	class="fixed top-0 -z-10 h-full w-full opacity-0 transition-opacity duration-500"
>
</div>

<script>
	import * as THREE from "three"

	const reducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)")

	if (!reducedMotion.matches) {
		const $bkg = document.getElementById("smoke-bkg")

		let delta = 0
		const clock = new THREE.Clock()
		const interval = 1 / 30 // fps

		let animationFrameId: number = 0

		let w = window.innerWidth
		let h = window.innerHeight + 200

		const THEME = {
			dark: {
				background: 0x666666,
				opacity: 0.1,
			},
			light: {
				background: 0xeeeeee,
				opacity: 0.1,
			},
		} as const

		const themePreference = window.getThemePreference()
		let currentTheme = THEME[themePreference]

		// inicializar Three.js
		// 3 cosas b√°sicas: escena, c√°mara, renderizador

		// escena üñºÔ∏è
		const scene = new THREE.Scene()

		// camara üìπ
		// 75 -> √°ngulo de visi√≥n
		const camera = new THREE.PerspectiveCamera(75, w / h, 1, 1000)
		camera.position.z = 500
		scene.add(camera)

		// ‚ñ∂Ô∏è renderizador
		const renderer = new THREE.WebGLRenderer({
			antialias: false,
			alpha: true,
			powerPreference: "high-performance",
			precision: "lowp",
		})
		renderer.setSize(w, h)
		// color de fondo
		scene.background = new THREE.Color(currentTheme.background)

		$bkg?.appendChild(renderer.domElement)

		const smokeParticles: THREE.Mesh[] = []

		const smokeTexture = new THREE.TextureLoader().load("/smoke.webp")

		// 1. geometria
		// crear un plano geom√©trico de 300x300
		const smokeGeo = new THREE.PlaneGeometry(300, 300)

		// 2. material
		const smokeMaterial = new THREE.MeshLambertMaterial({
			map: smokeTexture,
			transparent: true,
			opacity: currentTheme.opacity,
		})

		const NUM_OF_PARTICLES = 100

		for (let p = 0; p < NUM_OF_PARTICLES; p++) {
			// crear la malla con la geometria y el material
			const particle = new THREE.Mesh(smokeGeo, smokeMaterial)
			// posicionar aleatoriamente
			// en la x, y, z
			particle.position.set(
				Math.random() * 500 - 250, // X (de -250 a 250)
				Math.random() * 500 - 250, // Y (de -250 a 250)
				Math.random() * 1000 - 100 // Z (de -100 a 900)
			)
			// aleatoriamente la z
			particle.rotation.z = Math.random() * 360
			// a√±adimos la particula en la escena
			scene.add(particle)
			// a√±adimos la particula al array
			smokeParticles.push(particle)
		}

		$bkg?.classList.remove("opacity-0")

		function resize() {
			h = window.innerHeight + 150
			w = window.innerWidth
			camera.aspect = w / h
			camera.updateProjectionMatrix() // este metodo lo ten√©is que ejecutar siempre que cambiais los par√°metros de la c√°mara
			renderer.setSize(w, h)
		}

		function animate() {
			animationFrameId = requestAnimationFrame(animate)
			delta += clock.getDelta()

			if (delta > interval) {
				let count = smokeParticles.length
				while (count--) {
					smokeParticles[count].rotation.z += delta * 0.2
				}

				renderer.render(scene, camera)

				delta = 0
			}
		}

		animate()

		document.addEventListener("visibilitychange", () => {
			if (document.hidden && animationFrameId !== 0) {
				cancelAnimationFrame(animationFrameId)
				animationFrameId = 0
				return
			}

			if (animationFrameId === 0) {
				animate()
			}
		})

		// se va a disparar continuamente mientras hace el resize
		window.addEventListener("resize", resize)

		window.addEventListener("theme-changed", () => {
			const themePreference = window.getThemePreference()
			currentTheme = THEME[themePreference]
			scene.background = new THREE.Color(currentTheme.background)

			smokeParticles.forEach((particle) => {
				const smokeMaterial = particle.material as THREE.MeshLambertMaterial
				smokeMaterial.opacity = currentTheme.opacity
			})
		})
	}
</script>
