---
import ColumnProjects from "@/components/ColumnProjects.astro"
import Typography from "@/components/Typography.astro"
import ProjectBigImage from "@/components/ProjectBigImage.astro"
import { PROJECTS } from "@/consts/projects"
import { COUNTRIES } from "@/consts/countries"

const listOfProjects = PROJECTS.map((project) => {
	const { address } = project
	const countryName = COUNTRIES[address]?.name || ""
	return { ...project, countryName }
})

// split in 4 columns
const projectColumns = [
	listOfProjects.slice(0, 3),
	listOfProjects.slice(3, 6),
	listOfProjects.slice(6, 9),
	listOfProjects.slice(9, 12),
]
---

<section class="my-40">
	<Typography
		as="h3"
		variant="dubai-title"
		color="accent"
		class:list={"text-center"}
		id="selectedProject"
	>
		Elige tu proyecto
	</Typography>

	<Typography as="p" variant="body" color="primary" class="mt-4 text-center">
		Conoce los detalles de cada proyecto residencial
	</Typography>

	<div class="mt-8 flex flex-col items-center justify-center gap-8 md:mt-32 md:flex-row">
		<article
			class="relative flex w-full max-w-[60%] flex-col items-center justify-center md:absolute md:max-w-full"
		>
			<ProjectBigImage
				id="edificio-genesis"
				name="Edificio Genesís"
				address="mx"
				countryName="México"
			/>
		</article>

		<div class="projects-nav hidden w-full justify-between md:flex">
			<nav class="projects-lists flex h-full justify-start gap-2 py-4">
				<ColumnProjects projects={projectColumns[0]} />
				<ColumnProjects projects={projectColumns[1]} class="mt-4" />
			</nav>

			<nav class="projects-lists flex h-full justify-end gap-2 py-4">
				<ColumnProjects projects={projectColumns[2]} class="mt-4" />
				<ColumnProjects projects={projectColumns[3]} />
			</nav>
		</div>

		<div class="-mt-20 flex flex-col items-center justify-center md:mt-32 md:hidden">
			<div class="carousel mt-8 w-full overflow-y-hidden overflow-x-scroll">
				<div class="carousel-inner flex snap-x overflow-y-hidden overflow-x-scroll">
					{
						listOfProjects.map((project, index) => (
							<div
								class:list={`
									carousel-item w-[40%] flex-shrink-0 snap-center px-2
									${index === 0 ? "ml-[30%]" : ""}
									${index === listOfProjects.length - 1 ? "mr-[30%]" : ""}
								`}
							>
								<ColumnProjects projects={[project]} />
							</div>
						))
					}
				</div>
			</div>
		</div>
	</div>
</section>

<script>
	import { $, $$ } from "@/lib/dom-selector"

	document.addEventListener("astro:page-load", () => {
		const projectLinks = $$(".project-link") as globalThis.NodeListOf<HTMLAnchorElement>
		const projectNav = $(".projects-nav")
		const projectTitle = $(".project-title") as HTMLImageElement
		const projectPhoto = $(".project-photo") as HTMLPictureElement
		const projectCountry = $(".project-flag") as HTMLImageElement

		function activateProject(
			element: HTMLElement,
			link: HTMLElement,
			nav: HTMLElement,
			replaceUrl: boolean = false,
			showAlliesAndOpponents: boolean = true
		) {
			if (element.classList.contains("active")) return

			const { id, name, address, countryName, opponents = "", allies = "" } = element?.dataset

			// || !countryName
			if (!id || !name || !address) return

			const splitName = name.split(" ")
			const lastName = splitName[splitName.length - 1]
			const firstNames = splitName.slice(0, splitName.length - 1).join(" ")
			const spanNames = `
					<a href="/projects/${id}" class="project-link underline-transition transition-all duration-300 hover:text-accent motion-reduce:transition-none">
						<span class="flex flex-col">
							<span class="text-4xl">${firstNames?.toLocaleLowerCase()}</span>
							<span>${lastName?.toLocaleLowerCase()}</span>
						</span>
					</a>
			`

			nav?.querySelector(".active")?.classList.remove("active")
			nav
				?.querySelectorAll(".opponent")
				?.forEach((opponentEl) => opponentEl.classList.remove("opponent"))
			nav?.querySelectorAll(".ally")?.forEach((allyEl) => allyEl.classList.remove("ally"))

			link.classList.add("active")

			if (showAlliesAndOpponents) {
				allies.split(",").map((ally) =>
					projectLinks.forEach((link) => {
						if (link.dataset.id === ally) {
							link.classList.add("ally")
						}
					})
				)

				opponents.split(",").map((opponent) =>
					projectLinks.forEach((link) => {
						if (link.dataset.id === opponent) {
							link.classList.add("opponent")
						}
					})
				)
			}

			if (replaceUrl) {
				history.replaceState({}, "", `?project=${id}`)
			}

			const projectSrc = `/img/projects/${id}-big`

			projectPhoto.getElementsByTagName("source")[0].srcset = `${projectSrc}.avif`
			projectPhoto.getElementsByTagName("img")[0].src = `${projectSrc}.png`
			projectTitle.innerHTML = spanNames
			projectCountry.src = `/img/flags/${address}.webp`
			projectPhoto.getElementsByTagName("img")[0].alt = `Fotografía de ${name}`

			projectCountry.alt = `Bandera de ${countryName}`
		}

		const urlParams = new URLSearchParams(window.location.search)
		const projectId = urlParams.get("project") ?? "edificio-1"
		const projectEl = $(`[data-id="${projectId}"]`) as HTMLElement
		if (projectEl) {
			activateProject(projectEl, projectEl, projectNav, false)
		}

		projectLinks.forEach((link) => {
			link.addEventListener("mouseenter", (event) => {
				const currentTarget = event.currentTarget as HTMLElement
				if (currentTarget.classList.contains("active")) return
				activateProject(currentTarget, link, projectNav, true)
			})
		})

		const carouselInner = $(".carousel-inner") as HTMLElement
		const carouselItems = $$(".carousel-item") as globalThis.NodeListOf<HTMLElement>

		// detect centered carousel item with intersection observer
		const carouselObserver = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						const link = entry.target.querySelector(".project-link") as HTMLAnchorElement
						activateProject(link, link, carouselInner, false, false)
					}
				})
			},
			{
				root: carouselInner,
				threshold: 0.95,
			}
		)

		// detect match media change for mobile
		const mobileMediaQuery = window.matchMedia("(max-width: 768px)")
		// detect first time
		if (mobileMediaQuery.matches) {
			carouselItems.forEach((item) => carouselObserver.observe(item))
		}
		// detect if it changes
		mobileMediaQuery.addEventListener("change", (event) => {
			if (event.matches) {
				carouselItems.forEach((item) => carouselObserver.unobserve(item))
			} else {
				carouselItems.forEach((item) => carouselObserver.observe(item))
			}
		})
	})
</script>

<style>
	.projects-lists {
		@apply relative w-screen overflow-x-scroll md:h-[480px] xl:h-32;
		scrollbar-width: none;
	}

	@media (min-width: 1280px) {
		.projects-lists {
			@apply h-auto w-full max-w-none overflow-hidden py-2;
		}
	}

	@media (max-width: 768px) {
		.carousel {
			scrollbar-width: none;
		}

		.carousel::-webkit-scrollbar {
			display: none;
		}

		.carousel-inner {
			transition: transform 0.3s ease-in-out;
			scrollbar-width: none;
		}

		.carousel-inner::-webkit-scrollbar {
			display: none;
		}

		.carousel-item {
			transition: opacity 0.3s ease-in-out;
		}

		.carousel-item.active {
			opacity: 1;
			scale: 1.2;
		}
	}
</style>
